#!/usr/bin/env bash

set -euo pipefail

get_ecr_url() {
  local repository_name="${1}"
  aws ecr describe-repositories \
    --repository-names "${repository_name}" \
    --output text \
    --query 'repositories[0].repositoryUri'
}

ecr_exists() {
  local repository_name="${1}"
  aws ecr describe-repositories \
    --repository-names "${repository_name}" \
    --output text \
    --query 'repositories[0].registryId'
}

upsert_ecr() {
  local repository_name="${1}"
  if ! ecr_exists "${repository_name}"; then
    aws ecr create-repository --repository-name "${repository_name}"
  fi
}

read_build_args() {
  read_list_property 'BUILD_ARGS'
  for arg in ${result[@]+"${result[@]}"}; do
    build_args+=('--build-arg' "${arg}")
  done
}

read_cache_tag() {
  read_list_property 'CACHE_FROM'
  for arg in ${result[@]+"${result[@]}"}; do
    cache_tag+=("${arg}")
  done
}

read_cache_from() {
  read_list_property 'CACHE_FROM'
  for arg in ${result[@]+"${result[@]}"}; do
    cache_from+=('--cache-from' "${image}:${arg}")
  done
}

read_tags() {
  read_list_property 'TAGS'
  for arg in ${result[@]+"${result[@]}"}; do
    tags+=("${arg}")
  done
}

read_add_host() {
  read_list_property 'ADD_HOST'
  for arg in ${result[@]+"${result[@]}"}; do
    add_host+=('--add-host' "${arg}")
  done
}

# read a plugin property of type [array, string] into a Bash array. Buildkite
# exposes a string value at BUILDKITE_PLUGIN_{NAME}_{KEY}, and array values at
# BUILDKITE_PLUGIN_{NAME}_{KEY}_{IDX}.
read_list_property() {
  local base_name="BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_${1}"

  result=()

  if [[ -n ${!base_name:-} ]]; then
    result+=("${!base_name}")
  fi

  while IFS='=' read -r item_name _; do
    if [[ ${item_name} =~ ^(${base_name}_[0-9]+) ]]; then
      result+=("${!item_name}")
    fi
  done < <(env | sort)
}

compute_tag() {
  local docker_file="$1"
  local sums

  sums="$(sha1sum "${docker_file}")"

  read_list_property 'BUILD_ARGS'
  for arg in ${result[@]+"${result[@]}"}; do
    # include underlying environment variable
    if [[ ${arg} != *=* ]]; then
      arg+="=${!arg:-}"
    fi

    sums+="$(echo "${arg}" | sha1sum)"
  done

  read_list_property 'CACHE_ON'
  for file in ${result[@]+"${result[@]}"}; do
    sums+="$(sha1sum "${file}")"
  done

  echo "${sums}" | sha1sum | cut -c-7
}

$(aws ecr get-login --no-include-email)
default_repository_name="build-cache/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"
repository_name="${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_ECR_NAME:-${default_repository_name}}"
upsert_ecr "${repository_name}"
docker_file="${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_DOCKERFILE:-Dockerfile}"
image="$(get_ecr_url "${repository_name}")"
tag="$(compute_tag "${docker_file}")"

target_args=()
if [[ -n ${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_TARGET:-} ]]; then
  target_args+=('--target' "${BUILDKITE_PLUGIN_DOCKER_ECR_CACHE_TARGET}")
fi

build_args=()
read_build_args

cache_from=()
read_cache_from

cache_tag=()
read_cache_tag

add_host=()
read_add_host

if ! docker pull "${image}:${tag}"; then
  echo '--- Pulling images from cache'
  for arg in ${cache_tag[@]+"${cache_tag[@]}"}; do
    docker pull "${image}:${arg}"
  done

  echo '--- Building image'
  docker build \
  --file "${docker_file}" \
  --tag "${image}:${tag}" \
  ${add_host[@]+"${add_host[@]}"} \
  ${cache_from[@]+"${cache_from[@]}"} \
  ${build_args[@]+"${build_args[@]}"} \
  ${target_args[@]+"${target_args[@]}"} \
  . || exit 1

  docker tag "${image}:${tag}" "${image}:latest"

  echo "--- Pushing tag ${tag}"
  docker push "${image}:${tag}"
fi || echo "Not found"

echo "--- Pushing tag latest"
docker push "${image}:latest"

echo "--- Pushing additional tags"
tags=()
read_tags
for extra_tag in ${tags[@]+"${tags[@]}"}; do
  docker tag "${image}:${tag}" "${image}:${extra_tag}"
  docker push "${image}:${extra_tag}"
done

# Support using https://github.com/buildkite-plugins/docker-buildkite-plugin without an image
export BUILDKITE_PLUGIN_DOCKER_IMAGE="${image}:${tag}"
